package cell;

import java.util.Observable;
import java.util.Observer;

public class Cell  extends Observable implements Observer {
    
	private CellState state;
    private Integer noOfLiveNeighbors;
    private Integer newNoOfLiveNeighbors;
    
    public Cell() 
    {
        this.state = new DeadState();
        this.noOfLiveNeighbors = 0;
        this.newNoOfLiveNeighbors = 0;
    }
    
    // Update no. of live neighbors based on the notification generated by a neighboring cell
    public void update(Observable o, Object arg) 
    {
        Cell neighbor = (Cell)o;
        this.updateNoOfLiveNeighbors(neighbor);
    }
    
    private void updateNoOfLiveNeighbors(Cell neighbor)
    {
        neighbor.getCellState().updateNoOfLiveNeighbors(this);
    }
    
    public void nextStep()
    {
        this.getCellState().nextState(this);
    }
    
    // Getters and Setters
    public Integer getNoOfLiveNeighbors() 
    {
        return noOfLiveNeighbors;
    }

    public void setNoOfLiveNeighbors(Integer noOfLiveNeighbors) 
    {
        this.noOfLiveNeighbors = noOfLiveNeighbors;
    }
    
    public Integer getNewNoOfLiveNeighbors() 
    {
        return newNoOfLiveNeighbors;
    }
    
    public void setNewNoOfLiveNeighbors(Integer newNoOfLiveNeighbors) 
    {
        this.newNoOfLiveNeighbors = newNoOfLiveNeighbors;
    }
    
    public CellState getCellState() 
    {
        return state;
    }
    
    public void setCellState(CellState state) 
    {
        if (this.state.getState() != state.getState()) {
            this.state = state;
            this.setChanged();
            this.notifyObservers();
        }
    }
}

